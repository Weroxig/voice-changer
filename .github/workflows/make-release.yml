name: Make release

on:
  workflow_dispatch: # allows manual triggering
    inputs:
      create_release:
        description: 'Create new release'
        required: true
        type: boolean

env:
  BRANCH_NAME: ${{ github.head_ref || github.ref_name }}

jobs:
  create-tag:
    if: ${{ github.event.inputs.create_release == 'true' }}

    runs-on: ubuntu-latest

    outputs:
      release_id: ${{ steps.create_release.outputs.id }}

    steps:
    - name: Clone
      id: checkout
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Determine tag name
      id: tag
      shell: bash
      run: |
        BUILD_NUMBER="$(git rev-list --count HEAD)"
        SHORT_HASH="$(git rev-parse --short=7 HEAD)"
        if [[ "${{ env.BRANCH_NAME }}" == "master" ]]; then
          echo "name=b${BUILD_NUMBER}" >> $GITHUB_OUTPUT
        else
          SAFE_NAME=$(echo "${{ env.BRANCH_NAME }}" | tr '/' '-')
          echo "name=${SAFE_NAME}-b${BUILD_NUMBER}-${SHORT_HASH}" >> $GITHUB_OUTPUT
        fi

    - name: Create release
      id: create_release
      uses: anzz1/action-create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ steps.tag.outputs.name }}

  build-all:
    needs:
    - create-tag

    strategy:
      matrix:
        include:
        - os: windows-latest
          os_suffix: windows-amd64
          backend: cuda
        - os: windows-latest
          os_suffix: windows-amd64
          backend: dml
        # - os: macos-latest
        #   os_suffix: macos-amd64
        #   backend: cpu
        - os: ubuntu-latest
          os_suffix: linux-amd64
          backend: cpu
        - os: ubuntu-latest
          os_suffix: linux-amd64
          backend: cuda
        # - os: ubuntu-latest
        #   os_suffix: linux-amd64
        #   backend: rocm
    runs-on: ${{ matrix.os }}
    env:
      BACKEND: ${{ matrix.backend }}
    steps:
    - uses: actions/checkout@v4
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.10'
        architecture: x64
        # cache: pip
    - name: Installing build dependencies
      run: python -m pip install --upgrade pip wheel setuptools pyinstaller
    - name: Installing project dependencies
      run: python -m pip install -r requirements-common.txt -r requirements-${{ matrix.backend }}.txt
      working-directory: ./server
    - name: Building executable
      run: pyinstaller --clean -y --dist ./dist --workpath /tmp MMVCServerSIO.spec
      working-directory: ./server
    - name: Pack artifact
      shell: bash
      run: |
        if [ "$RUNNER_OS" = "Windows" ]; then
          7z a -tzip ./server/voice-changer-${{ matrix.os_suffix }}-${{ matrix.backend }}.zip ./server/dist > /dev/null 2>&1
        else
          zip -r ./server/voice-changer-${{ matrix.os_suffix }}-${{ matrix.backend }}.zip ./server/dist > /dev/null 2>&1
        fi
    - name: Upload release
      id: upload_release
      uses: actions/github-script@v3
      with:
        github-token: ${{ secrets.GITHUB_TOKEN }}
        script: |
          const path = require('path');
          const fs = require('fs');
          const release_id = '${{ needs.create-tag.outputs.release_id }}';
          await github.repos.uploadReleaseAsset({
            owner: context.repo.owner,
            repo: context.repo.repo,
            release_id: release_id,
            name: file,
            data: await fs.readFileSync('${{ ./server/voice-changer-${{ matrix.os_suffix }}-${{ matrix.backend }}.zip }}')
          });
